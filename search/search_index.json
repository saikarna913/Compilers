{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compilers - CS327","text":""},{"location":"#fluxscriptfs","title":"FluxScript(.fs)","text":""},{"location":"#overview","title":"Overview","text":"<p>This language is designed to be high-level (Python-like), dynamically typed, and functional, suitable for solving competitive programming problems and writing ai scripts. It emphasizes usability, expressive power, and functional programming principles like immutability where practical, while supporting a REPL for interactive development.</p>"},{"location":"#data-types","title":"Data Types","text":"<p>The language supports a minimal yet expressive set of built-in data types.</p>"},{"location":"#primitive-data-types","title":"Primitive Data Types","text":"<ul> <li>Numbers: Integers or floating-point values in decimal notation.</li> <li>Examples: <code>10</code>, <code>3.14</code>, <code>-42.5</code></li> <li>Booleans: Logical values.</li> <li>Examples: <code>True</code>, <code>False</code></li> <li>Strings: Sequences of characters enclosed in double quotes.</li> <li>Examples: <code>\"Hello, world!\"</code>, <code>\"\"</code></li> <li>Arrays: Ordered, mutable collections enclosed in square brackets.</li> <li>Examples: <code>[1, 2, 3]</code>, <code>[\"a\", 2, True]</code></li> <li>Dictionaries: Key-value mappings enclosed in curly braces.</li> <li>Examples: <code>{ \"key\": 42, \"flag\": True }</code></li> </ul>"},{"location":"#variables","title":"Variables","text":"<p>Variables are dynamically typed and lexically scoped. They are declared with <code>let</code> and can be reassigned with <code>assign</code>.</p> <ul> <li>Declaration: <code>let &lt;name&gt; = &lt;expression&gt;</code></li> <li>Example: <code>let x = 10</code></li> <li>Reassignment: <code>&lt;name&gt; assign &lt;expression&gt;</code></li> <li>Example: <code>x assign 20</code></li> <li>Scope: Variables are lexically scoped within their enclosing block or function.</li> </ul>"},{"location":"#operators","title":"Operators","text":""},{"location":"#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Supported operators follow standard mathematical precedence: - <code>+</code> (addition), <code>-</code> (subtraction), <code>*</code> (multiplication), <code>/</code> (division), <code>**</code> (exponentiation), <code>rem</code> (remainder) - Example: <code>10 + 5 * 2</code> evaluates to <code>20</code> (multiplication precedes addition). - Precedence: <code>()</code> &gt; <code>**</code> (right-associative) &gt; <code>* / rem</code> (left-associative) &gt; <code>+ -</code> (left-associative)</p>"},{"location":"#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code></li> <li>Example: <code>10 &lt; 20</code> evaluates to <code>True</code></li> </ul>"},{"location":"#logical-operators","title":"Logical Operators","text":"<ul> <li><code>and</code>, <code>or</code>, <code>not</code></li> <li>Example: <code>True and not False</code> evaluates to <code>True</code></li> </ul>"},{"location":"#assignment-operators","title":"Assignment Operators","text":"<ul> <li><code>let</code> (declaration), <code>assign</code> (reassignment)</li> <li>Example: <code>let x = 10</code> <code>x assign x + 1</code></li> </ul>"},{"location":"#control-flow","title":"Control Flow","text":"<p>Control flow constructs use <code>{}</code> blocks for clarity and consistency.</p>"},{"location":"#if-statements","title":"If Statements","text":"<ul> <li>Syntax: <code>if (&lt;condition&gt;) { &lt;block&gt; } [else { &lt;block&gt; }]</code></li> <li>Example:   <code>if (x &lt; 0) {       print \"Negative\"   } else {       print \"Non-negative\"   }</code></li> </ul>"},{"location":"#while-loops","title":"While Loops","text":"<ul> <li>Syntax: <code>while (&lt;condition&gt;) { &lt;block&gt; }</code></li> <li>Example:   <code>let x = 0   while (x &lt; 5) {       print x       x assign x + 1   }</code></li> </ul>"},{"location":"#for-loops","title":"For Loops","text":"<ul> <li>Syntax: <code>for (let i = start to end [step s]) {     &lt;block&gt;}</code></li> <li>Example:   <code>for (let i = 1 to 5) {       print i   }</code></li> </ul>"},{"location":"#print-statements","title":"Print Statements","text":"<ul> <li>Syntax: <code>print &lt;expression&gt;</code></li> <li>Example: <code>print \"Hello, world!\"</code></li> <li>Outputs to the console; supports all data types.</li> </ul>"},{"location":"#functions","title":"Functions","text":"<p>Support for first-class functions, proper closures, and included tail-call elimination for recursion.</p>"},{"location":"#function-definition","title":"Function Definition","text":"<ul> <li>Syntax: <code>func &lt;name&gt;(&lt;param1&gt;, &lt;param2&gt;, ...) { &lt;block&gt; }</code></li> <li>Example:   <code>func add(a, b) {       return a + b   }</code></li> </ul>"},{"location":"#return-statement","title":"Return Statement","text":"<ul> <li>Syntax: <code>return &lt;expression&gt;</code></li> <li>Example:   <code>func square(x) {       return x * x   }</code></li> </ul>"},{"location":"#first-class-functions","title":"First-Class Functions","text":"<p>Functions can be assigned to variables or passed as arguments. - Example:   <code>let double = func(x) { return x * 2 }   print double(5)  // Outputs: 10</code></p>"},{"location":"#closures","title":"Closures","text":"<p>Functions capture their lexical environment. - Example:   <code>func counter() {       let count = 0       return func() {           count assign count + 1           return count       }   }   let c = counter()   print c()  // Outputs: 1   print c()  // Outputs: 2</code></p>"},{"location":"#error-handling","title":"Error Handling","text":"<p>The language provides error messages with line location and a REPL that doesn\u2019t crash on errors. - Division by zero: Raises <code>ZeroDivisionError</code> with line number and suggestion (e.g., \"Check divisor\"). - Syntax errors: Flags malformed expressions with location (e.g., <code>5 +</code> \u2192 \"SyntaxError at line 1: incomplete expression\"). - Example REPL session:   ```</p> <p>let x = 10 / 0   [line 1] Error at '/': Division by zero print x   [line 1] Error at 'x': Undefined variable 'x'   ```</p>"},{"location":"#example-program","title":"Example Program","text":"<pre><code>func fib(n) {\n    if (n &lt;= 1) {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nlet x = 10\nprint \"Fibonacci of \" + x + \" is \" + fib(x)\n</code></pre>"},{"location":"fluxscript/","title":"FluxScript","text":""},{"location":"fluxscript/#introduction","title":"Introduction","text":"<p>FluxScript (.fs) is a high-level, dynamically typed, functional programming language designed for competitive programming and AI scripting. It prioritizes usability, expressive power, and functional programming principles like immutability where practical. With a robust REPL, FluxScript supports interactive development, making it perfect for rapid prototyping and experimentation.</p>"},{"location":"fluxscript/#language-design","title":"Language Design","text":""},{"location":"fluxscript/#design-choices","title":"Design Choices","text":"<ul> <li>High-level (Python-like): Simple, readable syntax to boost productivity.</li> <li>Dynamically typed: No type declarations required, providing flexibility for quick scripting.</li> <li>Functional: Includes first-class functions, proper closures, and tail-call elimination for efficient recursion.</li> </ul>"},{"location":"fluxscript/#motivation","title":"Motivation","text":"<p>FluxScript aims to strike a balance between power and ease of use, catering to competitive programmers and AI developers. Its interactive REPL enhances the coding experience, ensuring a seamless workflow for users.</p>"},{"location":"fluxscript/#implementation","title":"Implementation","text":""},{"location":"fluxscript/#progress-so-far","title":"Progress So Far","text":"<p>FluxScript\u2019s implementation is complete and reliable: - Core Components:   - Lexer, parser, and evaluator fully implemented to process all language constructs.   - Bytecode compilation for efficient execution(pending) - MUST Features:   - Primitive data types: numbers, booleans, strings, arrays   - Control flow: <code>if-else</code>, <code>while</code>, <code>for</code>, and recursion   - Functions: First-class citizens with proper closure support, tail-call optimization(pending) - DESIRABLE Features:   - Lexically-scoped variables for better organization   - Dictionaries for key-value data storage   - Detailed error messages with line numbers - Testing: Aim to achieve 100% automated test coverage for all features.(Current 81%)</p>"},{"location":"fluxscript/#documentation","title":"Documentation","text":""},{"location":"fluxscript/#user-friendly-documentation","title":"User-Friendly Documentation","text":"<p>FluxScript\u2019s documentation is crafted for accessibility: - Language Reference: Detailed syntax rules and examples for all constructs.README.md - Tutorial: Step-by-step guide for new users, covering REPL usage and basic programming task.getting_started.md - Example:   <code>fluxscript   func square(x) {       return x * x   }   let x = 5   print \"Square of \" + x + \" is \" + square(x)</code>   This snippet showcases variable declaration, function definition, and string concatenation.</p>"},{"location":"fluxscript/#test-coverage","title":"Test Coverage","text":""},{"location":"fluxscript/#ease-of-running-tests","title":"Ease of Running Tests","text":"<ul> <li>Single Command: Run <code>python run_coverage.py</code> to execute the full test suite.</li> <li>Test Suite Breakdown:</li> <li>Unit tests for lexer, parser, evaluator, and AST.</li> <li>Feature tests covering all language constructs.</li> <li>Real-world tests using Euler problems to validate usability.</li> </ul>"},{"location":"fluxscript/#codebase-coverage","title":"Codebase Coverage","text":"<ul> <li>Aim 100% Coverage: Every line of code is tested, ensuring robustness and correctness.</li> </ul>"},{"location":"getting_started/","title":"FluxScript Getting Started","text":"<p>Welcome to FluxScript, a high-level, dynamically typed, functional programming language designed for competitive programming and rapid prototyping. This guide will help you install and run FluxScript, and it includes some tutorial examples to get you started.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Clone the Repository    Clone the project to your local machine:    <code>bash    git clone https://github.com/AtalGupta/Compilers.git    cd Compilers</code></p>"},{"location":"getting_started/#running-fluxscript","title":"Running FluxScript","text":"<p>FluxScript comes with an entry point script named <code>flux.py</code>. You can run FluxScript programs by specifying the source file (with a <code>.fs</code> extension).</p> <p>For example, to run a FluxScript program stored in <code>example.fs</code>, use:</p> <pre><code>python flux.py example.fs\n</code></pre> <p>Alternatively, the provided Bash script <code>test.sh</code> can be used to run your programs. Make sure it has execute permissions:</p> <pre><code>chmod +x test.sh\n./test.sh example.fs\n</code></pre>"},{"location":"getting_started/#tutorial-examples","title":"Tutorial Examples","text":""},{"location":"getting_started/#example-1-hello-world","title":"Example 1: Hello World","text":"<p>Create a file named <code>hello.fs</code> with the following content:</p> <pre><code>print \"Hello, FluxScript!\"\n</code></pre> <p>Run it using:</p> <pre><code>python flux.py hello.fs\n</code></pre>"},{"location":"getting_started/#example-2-variables-and-expressions","title":"Example 2: Variables and Expressions","text":"<p>Create a file named <code>variables.fs</code>:</p> <pre><code>let x = 10\nlet y = 20\nprint \"Sum: \" + (x + y)\n</code></pre> <p>Run it using:</p> <pre><code>python flux.py variables.fs\n</code></pre>"},{"location":"getting_started/#example-3-functions-closures","title":"Example 3: Functions &amp; Closures","text":"<p>FluxScript supports first-class functions and closures. Create a file named <code>counter.fs</code>:</p> <pre><code>func counter() {\n    let count = 0\n    return func() {\n        count assign count + 1\n        return count\n    }\n}\nlet c = counter()\nprint c()  // Outputs: 1\nprint c()  // Outputs: 2\n</code></pre> <p>Run it using:</p> <pre><code>python flux.py counter.fs\n</code></pre>"},{"location":"getting_started/#example-4-conditional-statements-with-elif","title":"Example 4: Conditional Statements with Elif","text":"<p>FluxScript supports if/else and extended elif clauses. Create a file named <code>condition.fs</code>:</p> <pre><code>let x = 5\nif (x &gt; 3) {\n    print \"x is greater than 3\"\n} elif (x == 3) {\n    print \"x equals 3\"\n} else {\n    print \"x is less than 3\"\n}\n</code></pre> <p>Run it using:</p> <pre><code>python flux.py condition.fs\n</code></pre>"},{"location":"getting_started/#example-5-loops-with-break-continue","title":"Example 5: Loops with Break &amp; Continue","text":"<p>Loops have their own lexical scope and can use <code>break</code> and <code>continue</code>. Create a file named <code>loop.fs</code>:</p> <pre><code>for (let i = 1 to 5) {\n    if (i == 3) {\n        continue\n    }\n    print i\n    if (i == 4) {\n        break\n    }\n}\n</code></pre> <p>Run it using:</p> <pre><code>python flux.py loop.fs\n</code></pre>"},{"location":"getting_started/#conclusion","title":"Conclusion","text":"<p>You have now installed FluxScript and seen several examples covering the basics such as printing, variables, functions, control flow with conditionals, and loops. As you explore the language further, consider experimenting with additional features like dictionaries and more advanced functional concepts.</p> <p>Happy coding in FluxScript!</p>"}]}